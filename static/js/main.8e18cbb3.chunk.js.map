{"version":3,"sources":["TaskComponent.js","tasksArray.js","Header.js","App.js","index.js"],"names":["TaskComponent","className","type","value","checked","this","props","propsObj","completed","onChange","handleChange","id","style","display","color","Component","tasksArray","text","Header","state","isLoading","setTimeout","setState","border","backgroundColor","textAlign","App","tasks","bind","prevState","map","task","newTaskArray","propsTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAkGeA,E,4JAxDX,WAAS,IAAD,OAWJ,OAEI,sBAAKC,UAAY,YAAjB,UAEI,uBACIC,KAAO,WAEPC,MAAQ,OAIRC,QAAWC,KAAKC,MAAMC,SAASC,UAG/BC,SAEI,kBAAK,EAAKH,MAAMI,aAGZ,EAAKJ,MAAMC,SAASI,OAO5B,uBACIT,KAAO,OACPU,MAEIP,KAAKC,MAAMC,SAASC,UAnCjB,CACnBK,QAAS,QAJK,CACdC,MAAO,kB,GAPSC,aCjBbC,EAtBI,CACf,CACIL,GAAI,EACJM,KAAM,iBACNT,WAAW,GAEf,CACIG,GAAI,EACJM,KAAM,aACNT,WAAW,GAEf,CACIG,GAAI,EACJM,KAAM,aACNT,WAAW,GAEf,CACIG,GAAI,EACJM,KAAM,iBACNT,WAAW,IC6BJU,E,kDA7CX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,WAAW,GAHN,E,qDAOb,WAAoB,IAAD,OACfC,YAAW,WACP,EAAKC,SAAS,CAACF,WAAW,MAC3B,O,oBAIP,WASI,OACI,8BAGQf,KAAKc,MAAMC,UAEP,qBAAKR,MAAS,CAACW,OAAQ,kBAAmBC,gBAAiB,UAA3D,SACI,oBAAIZ,MAfF,CAClBE,MAAO,MACPW,UAAW,UAaK,+CAKJ,qBAAKb,MAAS,CAACW,OAAQ,kBAAmBC,gBAAiB,UAA3D,SACI,oBAAIZ,MAjBH,CACjBE,MAAO,QACPW,UAAW,UAeK,4B,GArCPV,aC4HNW,E,kDAxFT,aAAc,IAAD,8BACX,gBACKP,MAAQ,CACXQ,MAAOX,GAET,EAAKN,aAAe,EAAKA,aAAakB,KAAlB,gBALT,E,gDAQb,SAAajB,GAMXN,KAAKiB,UAAS,SAAAO,GAUZ,MAAO,CAACF,MATaE,EAAUF,MAAMG,KAAI,SAAAC,GACvC,OAAGA,EAAKpB,KAAOA,EACX,2BACKoB,GADL,IAEEvB,WAAYuB,EAAKvB,YAGhBuB,W,oBAMb,WAAS,IAAD,OACAC,EAAe3B,KAAKc,MAAMQ,MAAMG,KAAI,SAAAG,GAAS,OACjD,cAAC,EAAD,CAoBI1B,SAAY0B,EAKZvB,aAAgB,EAAKA,cAvBduB,EAAUtB,OA0BzB,OACE,gCACE,cAAC,EAAD,IACA,uBACA,qBAAKV,UAAY,YAAjB,SAEO+B,W,GAlECjB,aC5BlBmB,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IADF,OAGAC,SAASC,eAAe,W","file":"static/js/main.8e18cbb3.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './App.css';\n\n// function TaskComponent(props){\n//     const logCheckedTask = () =>{\n//         console.log('item completed')\n//     }\n\n//     return(\n//         <div className=\"todo-item\">\n//             <input \n//                 type ='checkbox' \n//                 checked = {props.propsTask.completed}\n//                 onChange = {logCheckedTask}\n//             />\n\n//             <h1 className = 'heading-color'>\n\n//                 {/* a. pattern*/}\n\n//                 {props.propsTask.task}\n//                 {/* propsTask = {propsTask} */}\n\n//                 {/* b. pattern*/}\n\n//                 {/*{props.task}*/}\n//                 {/*task = {propsTask.task} */}\n//             </h1>\n\n//         </div>\n//     )\n// }\n// export default TaskComponent\n\n/**\n * Challenge: Style the completed todo items differently from the incomplete items.\n */\n\n//changing component to a class based component, rendering props\nclass TaskComponent extends Component{\n    //other methods live here\n\n    render(){\n\n        //js & css style objects lives here\n        const textStyle = {\n            color: 'green',\n        }\n        const completedStyle = {\n            display: 'none'\n        }\n\n\n        return(\n\n            <div className = 'todo-item'>\n                {/*this input is passed down props and is allowed to change. */}\n                <input \n                    type = 'checkbox'\n\n                    value = 'text'\n\n                    //accesses condition of what ever is completed\n                    //component receives props\n                    checked = {this.props.propsObj.completed}\n\n                    //applying a method that acts on an objects keyVal/checkboxes.\n                    onChange = {\n                        //component method receives props\n                        ()=> this.props.handleChange(//method performs action on element\n\n                            //component receives props\n                            this.props.propsObj.id\n                        )\n                    }\n                />\n    \n                {/*style change directly on element*/}\n\n                    <input\n                        type = 'text'\n                        style = {\n                            //component receives props; if completed is true apply completed style = none; no text shown\n                            this.props.propsObj.completed\n                            ? \n                            completedStyle \n                            : \n                            textStyle\n                        }\n                    />\n\n                    {/* //component receives props */}\n                    {/* {this.props.propsTask.text} */}\n                    \n            </div>\n        )\n    }\n}\nexport default TaskComponent\n\n\n\n\n","const tasksArray = [\n    {\n        id: 1,\n        text: 'Study react.js',\n        completed: false\n    },\n    {\n        id: 2,\n        text: 'Take a nap',\n        completed: false\n    },\n    {\n        id: 3,\n        text: 'Clean room',\n        completed: false\n    },\n    {\n        id: 4,\n        text: 'Take out trash',\n        completed: false\n    }\n]\nexport default tasksArray\n","import React, {Component} from 'react'\n\nclass Header extends Component{\n    constructor(){\n        super()\n        this.state = {\n            isLoading: true\n        }\n    }\n\n    componentDidMount(){\n        setTimeout(() => {\n            this.setState({isLoading: false})\n        }, 3000);\n    }\n\n\n    render(){\n        const loadTextStyle = {\n            color: 'red',\n            textAlign: 'center'\n        }\n        const appTextStyle = {\n            color: 'green',\n            textAlign: 'center'\n        }\n        return(\n            <div>\n                {/* applying conditional rendering to child component */}\n                    {\n                    this.state.isLoading \n                        ? \n                        <div style = {{border: 'solid 5px black', backgroundColor: \"silver\"}}>\n                            <h1 style = {loadTextStyle}>\n                                Application load in progress...\n                            </h1>\n                        </div>\n                        : \n                        <div style = {{border: 'solid 5px black', backgroundColor: \"silver\"}}>\n                            <h1 style = {appTextStyle}>\n                                TaskIt\n                            </h1>\n                        </div>\n                    }\n            </div>\n        )\n    }\n}\nexport default Header\n","/* eslint-disable react/jsx-pascal-case */\nimport React, {Component} from 'react'\nimport TaskComponent from './TaskComponent.js';\n// import './App.css';//modules\n// import Props from './Props.js'\n// import Props_2 from './Props_2.js'\nimport tasksArray from './tasksArray.js'\nimport Header from './Header.js'\n\n//React app phase 1\n// From scratch, initialize the React app\n// Render an <Root /> component\n// Create the <Root /> component from scratch\n// Have the <Root /> component render 3 or 4 checkboxes with \n//paragraphs or spans next to it\n// like you're making a todo list with some hard-coded items on it\n\n\n/*\nReact app phase 2\nTime to have fun styling! But first things first: \n\n1. Change the input/p combo below \nto be a new component called <TodoItem />. \n<TodoItem /> (for now) will just have \nthe same displayed data below (every todo item is the same) \nhardcoded inside of it. (We'll learn soon how to make \nthe TodoItem more flexible)\n    \n2. Style up the page however you want! \nYou're welcome to use regular CSS (in the CSS file) \nor inline styles, or both!\n*/\n\n\n//functional component based\nclass App extends Component{\n\n      constructor(){\n        super()\n        this.state = {\n          tasks: tasksArray\n        }\n        this.handleChange = this.handleChange.bind(this)\n      }\n\n      handleChange(id){\n\n        //setting new state that changes original state \n        //to return a new array of items turned to their opposites \n        //based on a certain condition\n        //then a new object is returned.\n        this.setState(prevState =>{\n          const updatedTasks = prevState.tasks.map(task =>{\n            if(task.id === id){\n                return{\n                  ...task,\n                  completed: !task.completed\n                }\n            }\n            return task\n          })\n          return {tasks: updatedTasks}\n        })\n      }\n\n      render(){\n        const newTaskArray = this.state.tasks.map(propsTask => \n          <TaskComponent\n              //props is passed down here\n              key = {propsTask.id}\n\n              //a. pattern\n    \n              //props is passed down here individually\n\n              // within tasksComponent: this.props.completed\n            \n              \n              // within RootComponent: completed = {propsTask.completed}\n\n              // within RootComponent: id = {propsTask.id}\n\n              //b. pattern\n    \n              //within tasksComponent: this.props.propsObj.item\n\n              //within RootComponent: propsObj = {propsTask}\n              propsObj = {propsTask}\n\n\n\n              //method lives within the newly added component.\n              handleChange = {this.handleChange}\n          />\n        )\n      return (\n        <div>\n          <Header/>\n          <br/>\n          <div className = \"todo-list\">\n                \n                {newTaskArray}\n                {/* <div>\n    \n                  can pass down props inline\n    \n                  <Props\n                    data = 'some data'\n                  />\n                  {props.data}\n    \n                  can pass down props with object literals\n                  \n                  <Props_2\n                    propsObj = {{data_2: 'Addition props data'}}\n                  />\n    \n                  {props.propsObj.data}\n                </div> */}\n          </div>\n        </div>\n\n      );\n      }\n}\nexport default App;//modules\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","//rendering page; where we render all of our components\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';//importing a component\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> {/*parent component*/}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}